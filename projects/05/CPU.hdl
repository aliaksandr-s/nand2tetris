// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A or C type
    Not(in=instruction[15], out=Ainst);
    Not(in=Ainst, out=Cinst);

    // A reg
    And(a=Cinst, b=instruction[5], out=compA);
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ARegInput);
    Or(a=Ainst, b=compA, out=loadA);
    ARegister(in=ARegInput, load=loadA, out=ARegOut);

    // D reg
    And(a=instruction[4], b=Cinst, out=loadD);
    DRegister(in=ALUOut, load=loadD, out=DRegOut);

    // ALU
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AorM);
    ALU(x=DRegOut, 
        y=AorM, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        zr=ZROut, 
        ng=NGOut, 
        out=ALUOut
    );

    // PC
    And(a=ZROut, b=instruction[1], out=JEQ);
    And(a=NGOut, b=instruction[2], out=JLT);
    Or(a=ZROut, b=NGOut, out=OrZeroOrNeg);
    Not(in=OrZeroOrNeg, out=ZeroOrNeg);
    And(a=ZeroOrNeg, b=instruction[0], out=JGT);
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=JMP);
    And(a=Cinst, b=JMP, out=PCload);
    Not(in=PCload, out=PCinc);
    PC(in=ARegOut, reset=reset, load=PCload, inc=PCinc, out[0..14]=pc);

    // outputs //

    // outM
    And16(a=ALUOut, b=true, out=outM);

    // writeM
    And(a=instruction[3], b=Cinst, out=writeM);

    // addressM
    And16(a=ARegOut, b=true, out[0..14]=addressM);
}
